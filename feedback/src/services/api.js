import axios from 'axios';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Add token to requests if available
api.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// Handle token expiration
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

// Authentication API calls
export const authAPI = {
  registerAdmin: (data) => {
    // Extract admin name from email if not provided
    const emailUsername = data.email.split('@')[0];
    const adminName = data.adminName || `${emailUsername} (Admin)`;
    
    const payload = {
      school_name: data.schoolName,
      email: data.email,
      password: data.password,
      admin_name: adminName,
      admin_phone_number: data.adminPhone || 'Not provided', // Use provided phone or placeholder
      plan: data.plan
    };
    return api.post('/auth/register/admin', payload);
  },

  registerStudent: (data) => {
    // Get current user from localStorage to get school_admin_id
    const currentUser = JSON.parse(localStorage.getItem('user') || '{}');
    const schoolAdminId = currentUser.role === 'admin' ? currentUser.id : currentUser.school_admin_id;
    
    const payload = {
      email: data.email,
      name: data.name,
      password: data.password, // Password should be provided or will be auto-generated
      phone_number: data.phoneNumber,
      school_admin_id: schoolAdminId,
      school_student_id: data.id,
      // password field removed - will be auto-generated by backend
    };
    return api.post('/auth/register/student', payload);
  },

  registerTeacher: (data) => {
    // Get current user from localStorage to get school_admin_id
    const currentUser = JSON.parse(localStorage.getItem('user') || '{}');
    const schoolAdminId = currentUser.role === 'admin' ? currentUser.id : currentUser.school_admin_id;
    
    const payload = {
      email: data.email,
      name: data.name,
      password: data.password, // Password should be provided or will be auto-generated
      phone_number: data.phoneNumber,
      school_admin_id: schoolAdminId,
    };
    return api.post('/auth/register/teacher', payload);
  },

  login: (email, password) => {
    const formData = new FormData();
    formData.append('username', email);
    formData.append('password', password);

    return api.post('/auth/login', formData, {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
    });
  },

  getCurrentUser: () => api.get('/me'),

  logout: () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
  }
};

// Student API calls
export const studentAPI = {
  getAll: () => api.get('/students'),
  getById: (id) => api.get(`/students/${id}`),
  create: (data) => api.post('/students', data),
  update: (id, data) => api.put(`/students/${id}`, data),
  delete: (id) => api.delete(`/students/${id}`)
};

// Teacher API calls
export const teacherAPI = {
  getAll: () => api.get('/teachers'),
  getById: (id) => api.get(`/teachers/${id}`),
};

// Admin API calls
export const adminAPI = {
  getAll: () => api.get('/admins'),
};

// Course API calls
export const courseAPI = {
  create: (data) => {
    const payload = {
      course_name: data.name,
      course_description: data.description,
      course_teacher_id: data.teacher_id,
    };
    return api.post('/courses', payload);
  },
  getAll: () => api.get('/courses'),
  getById: (id) => api.get(`/courses/${id}`),
};

// Assignment API calls
export const assignmentAPI = {
  create: (data) => api.post('/assignments', data),
  getById: (id) => api.get(`/assignments/${id}`),
  getForCourse: (courseId) => api.get(`/courses/${courseId}/assignments`),
  submit: (assignmentId, file) => {
    const formData = new FormData();
    formData.append('file', file);
    return api.post(`/assignments/${assignmentId}/submit`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
  },
};

export default api;
